<?php

namespace App\Controller;

use App\Entity\Compte;
use App\Entity\Evenement;
use App\Form\ModifyAccountType;
use App\Form\RegistrationFormType;
use ContainerBi1bDen\getEndroitRepositoryService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
/**
 * @Route("/account")
 */
class AccountController extends AbstractController
{



    /**
     * @Route("/",name="account")
     */
    public function index(): Response
    {
        $user = $this->getUser();
        $repository = $this->getDoctrine()->getRepository(Compte::class);
        $row = $repository->findOneByAdresseMail(11); //FIX
        return $this->render('account/index.html.twig', ['row'=>$row
        ]);

    }

    /**
     * @Route("/modifyaccount",name="modifyaccount")
     */
    public function modifyaccount(EntityManagerInterface $manager,Request $request)
    {
        $user = $this->getUser();
        $repository = $this->getDoctrine()->getRepository(Compte::class);
        $acc = $repository->findOneByAdresseMail(11); //FIX

        $form = $this->createForm(ModifyAccountType::class,$acc);
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            if($this->valid($form))
            {
                $manager->persist($acc);
                $manager->flush();
                $this->addFlash('success','Account information updated with success !');
            }
        }
        return($this->render('account/modifyAccount.html.twig' ,['row'=>$acc ,
        'form' => $form->createView()]));
    }

    /**
     * @Route ("/deleteaccount",name="deleteaccount")
     */
    public function deleteaccount(EntityManagerInterface $manager,Request $request)
    {

    }

    /**
     * @Route("/activities/{type}",name="account.activities")
     */
    public function showActivities($type): Response
    {
         if ($type == "place") {
             $repository = $this->getDoctrine()->getRepository(Endroit::class);
         }else if ($type == "event"){
             $repository = $this->getDoctrine()->getRepository(Evenement::class);
         }else {
             $repository = $this->getDoctrine()->getRepository(Indoor::class);
         }


        $user = $this->getUser();

        if($user && !in_array('ROLE',$user->getRoles())) {
            $conditions = ['user' => $user];
        }
        $Activities = $repository->findByAdresseMail($user->getAdresseMail());

        return $this->render('account/showActivities.html.twig', [
            'activities'=> $Activities,
            'type'=>$type

        ]);

    }


    /**
     * @Route("/activities",name="account.activities.choice")
     */
    public function chooseActivities(): Response
    {


        return $this->render('account/chooseActivities.html.twig');

    }


    /**
     * @Route("/activities/delete/{activity}",name="account.activities.delete")
     */
    public function deleteActivity($activity): Response
    {

        return $this->render('account/deleteActivities.html.twig', [

        ]);

    }


    /**
     * @Route("/activities/modify/{activity}/",name="account.activities.modify")
     */
    public function modifyActivity($activity): Response
    {
        return $this->render('account/modifyActivity.html.twig');

    }

    public function isCsrfTokenValid(string $id, ?string $token): bool
    {
        return parent::isCsrfTokenValid($id, $token); // TODO: Change the autogenerated stub
    }

    public function valid($form)
    {
        $compte = $this->getDoctrine()->getRepository(Compte::class);
        $result = $compte->findByUsername($form->get("username")->getData());
        if(isset($result))
        {
            $this->addFlash('fail','Essayer de Saisir un nouveau username ,cela dÃ©ja existe !');
            return false;
        }
        return true;
    }
}
